#!/usr/bin/env python3

import adjust
import yaml
import requests

DRIVER_NAME = "statestore"
DRIVER_VERSION = "1.0.1"
DRIVER_DESC = "An Optune adjust driver that stores adjust state and returns it back on query"
CFG_FILE = "./config.yaml"

REQUIRED_SETTINGS_FIELDS = [ "value", "step", "type" ]

class StatestoreAdjust(adjust.Adjust):

    def _parse_cfg(self):
        try:
            f = open(CFG_FILE)
            d = yaml.load(f)
        except yaml.error.YAMLError as e:
            raise Exception("syntax error in {}: {}".format(CFG_FILE, str(e)))

        # valcheck
        assert(DRIVER_NAME in d), \
            "Missing driver configuration: missing {} section".format(
                DRIVER_NAME)

        cfg = d[DRIVER_NAME]

        assert "components" in cfg, \
            "components missing from driver configuration"

        for c_name, c_data in cfg["components"].items():

            assert "settings" in c_data, \
                "settings missing from driver configuration for component {}".format(
                    c_name)

            for s_name, s_data in c_data["settings"].items():

                for s in REQUIRED_SETTINGS_FIELDS:
                    assert s in s_data, \
                        "missing required key '{}' from driver configuration for setting {}, component {}".format(
                            s, s_name, c_name)

        return cfg


    def query(self):
        return { "application" : {} }

    def adjust(self, data):

        assert ("application" in data), \
            "Invalid input: missing application key"

        value = data['application']['components'].get('app', {}).get('settings', {}).get('key_size', {}).get('value', None)
        # Store application key in state
        # This may raise an exception
        if value:
            requests.put('http://app:8080/set/' + str(value))


# initialize and run
if __name__ == "__main__":
    driver = StatestoreAdjust(
        "{} {}".format(DRIVER_NAME, DRIVER_VERSION),
        DRIVER_DESC,
        supports_cancel = True,
        progress_interval = None)

    driver.run()
